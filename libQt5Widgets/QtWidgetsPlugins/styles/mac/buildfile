# Note: If anything in this file seems underdocumented it is probably covered
#       in libQt5Core/QtCore/buildfile.
#

include ../../../QtWidgets/

../lib{qmacstyle}: ../../../mkspecs/hxx{**} hxx{*} mm{*}

moc_hdr = qmacstyle_mac_p

moc_src_adhoc = main

# The "metadata library": its purpose is to make sure all the imported
# libraries are resolved for the ad hoc Objective-C++ compilation and moc
# rules below.
#
# Note: use a rule hint to resolve ambiguity between C and C++ library.
#
[rule_hint=cxx] libul{Qt5PluginsMacStyleMeta}: \
  ../../../QtWidgets/lib{Qt5Widgets Qt5WidgetsPrivate}

# Plugin metadata file.
#
../lib{qmacstyle}: file{macstyle.json}: include = adhoc

# Declare the dependency of the library target on the Objective-C++ source
# files via the corresponding object files.
#
for s: mm{*}
{
  n = $name($s)

  obja{$(n).a.o}:  $s
  objs{$(n).so.o}: $s

  ../liba{qmacstyle}: obja{$(n).a.o}
  ../libs{qmacstyle}: objs{$(n).so.o}
}

# Rules for compiling Objective-C++ source files into object files.
#
# Note: these rules are only used on Mac OS (so no -fPIC, etc).  Note: exclude
# libua{Qt5PluginsMacStyleMeta} from update during match not to mess up its
# for-install'ness.
#
# @@ TODO: replace `--update-exclude libu?{Qt5PluginsMacStyleMeta}` with
#          update=unmatch once we have the ability to specify
#          prerequisite-specific variables for pattern prerequisites.
#
obja{~'/(.*).a/'}: mm{~'/\1/'} libua{Qt5PluginsMacStyleMeta}
{{
  dep_poptions = $cxx.lib_poptions(libua{Qt5PluginsMacStyleMeta}, obja)

  depdb hash $dep_poptions

  depdb dyndep "-I$out_root/QtWidgets" "-I$src_root/QtWidgets"          \
               --what=header --default-type=h                           \
               --update-exclude libua{Qt5PluginsMacStyleMeta}           \
               -- $cxx.path $cc.poptions $cxx.poptions $dep_poptions    \
                  $cc.coptions $cxx.coptions $cxx.mode -M -MG $path($<[0])

  diag obj-c++ ($<[0])

  $cxx.path $cc.poptions $cxx.poptions $dep_poptions    \
            $cc.coptions $cxx.coptions $cxx.mode        \
            -o $path($>) -c -x objective-c++ $path($<[0])
}}

objs{~'/(.*).so/'}: mm{~'/\1/'} libus{Qt5PluginsMacStyleMeta}
{{
  dep_poptions = $cxx.lib_poptions(libus{Qt5PluginsMacStyleMeta}, objs)

  depdb hash $dep_poptions

  depdb dyndep "-I$out_root/QtWidgets" "-I$src_root/QtWidgets"          \
               --what=header --default-type=h                           \
               --update-exclude libus{Qt5PluginsMacStyleMeta}           \
               -- $cxx.path $cc.poptions $cxx.poptions $dep_poptions    \
                  $cc.coptions $cxx.coptions $cxx.mode -M -MG $path($<[0])

  diag obj-c++ ($<[0])

  $cxx.path $cc.poptions $cxx.poptions $dep_poptions    \
            $cc.coptions $cxx.coptions $cxx.mode        \
            -o $path($>) -c -x objective-c++ $path($<[0])
}}

# Dependencies involving moc-generated C++ source files.
#

# Dependencies involving lib{qmacstyle}, moc-generated C++ source files
# (moc_foo.cpp), and the C++ headers the they were generated from (for
# example, `moc foo.h` produces moc_foo.cpp).
#
for s: hxx{$moc_hdr}
{
  cxx{moc_$name($s)}: $s libul{Qt5PluginsMacStyleMeta}
  ../lib{qmacstyle}: cxx{moc_$name($s)}
}

# Dependencies involving lib{qmacstyle}, moc-generated C++ source files
# (foo.moc), and the Objective-C++ source files the .moc's were generated from
# (for example, `moc foo.mm` produces foo.moc).
#
for s: mm{$moc_src_adhoc}
{
  n = $name($s)
  moc{$n}: $s libul{Qt5PluginsMacStyleMeta}
  ../lib{qmacstyle}: moc{$n}: include = adhoc
}

../lib{qmacstyle}: libul{Qt5PluginsMacStyleMeta}

# Build options.
#
cxx.poptions =+ "-I$out_base" "-I$src_base"

cxx.poptions += -DQT_PLUGIN

if ($cxx.class == 'gcc')
  cxx.coptions += -fvisibility=hidden -fvisibility-inlines-hidden

../lib{qmacstyle}: cxx.libs += -framework AppKit

# Installation.
#
hxx{*}: install = false

../lib{qmacstyle}: install = lib/qt5/plugins/styles/
