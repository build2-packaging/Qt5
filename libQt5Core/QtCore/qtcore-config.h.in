#pragma once

// "Supports scripting Qt-based applications."
//
#define QT_FEATURE_properties 1
#if !QT_CONFIG(properties)
#  define QT_NO_PROPERTIES
#endif

// "Provides easing curve" (animation, interpolation between 0 and 1).
//
#define QT_FEATURE_easingcurve 1

// "Provides a framework for animations."
//
#define QT_FEATURE_animation 1
#if !QT_CONFIG(animation)
#  define QT_NO_ANIMATION
#endif

// "Provides hierarchical finite state machines."
//
#define QT_FEATURE_statemachine 1
#if !QT_CONFIG(statemachine)
#  define QT_NO_STATEMACHINE
#endif

// "QEventTransition class"
//
#define QT_FEATURE_qeventtransition 1

// "Supports non-unicode text conversions."
//
#define QT_FEATURE_codecs 1
#if !QT_CONFIG(codecs)
#  define QT_NO_CODECS
#endif

// "Supports conversions between text encodings."
//
#define QT_FEATURE_textcodec 1
#if !QT_CONFIG(textcodec)
#  define QT_NO_TEXTCODEC
#endif

// "Provides MIME type handling."
//
#define QT_FEATURE_mimetype 1
#if !QT_CONFIG(mimetype)
#  define QT_NO_MIMETYPE
#endif

// "Supports big codecs, e.g. CJK."
//
#define QT_FEATURE_big_codecs 1
#if !QT_CONFIG(big_codecs)
#  define QT_NO_BIG_CODECS
#endif

// "Provides support for the deprecated binary JSON format."
//
// Although it's deprecated it's still used unconditionally upstream.
//
#define QT_FEATURE_binaryjson 1

// "CBOR stream reading and writing"
//
#define QT_FEATURE_cborstreamreader 1
#define QT_FEATURE_cborstreamwriter 1

// "Provides support for command line parsing."
//
#define QT_FEATURE_commandlineparser 1

// "Provides the item model for item views"
//
#define QT_FEATURE_itemmodel 1
#if !QT_CONFIG(itemmodel)
#  define QT_NO_ITEMMODEL
#endif

// "Supports processing of data passed between another model and a view."
//
#define QT_FEATURE_proxymodel 1
#if !QT_CONFIG(proxymodel)
#  define QT_NO_PROXYMODEL
#endif

// "Supports concatenating source models."
//
#define QT_FEATURE_concatenatetablesproxymodel 1

// "Supports proxying a source model unmodified."
//
#define QT_FEATURE_identityproxymodel 1
#if !QT_CONFIG(identityproxymodel)
#  define QT_NO_IDENTITYPROXYMODEL
#endif

// "Supports sorting and filtering of data passed between another model and a
// view."
//
#define QT_FEATURE_sortfilterproxymodel 1
#if !QT_CONFIG(sortfilterproxymodel)
#  define QT_NO_SORTFILTERPROXYMODEL
#endif

// "Provides a model that supplies strings to views."
//
#define QT_FEATURE_stringlistmodel 1
#if !QT_CONFIG(stringlistmodel)
#  define QT_NO_STRINGLISTMODEL
#endif

// "Provides a proxy to swap rows and columns of a model."
//
#define QT_FEATURE_transposeproxymodel 1
#if !QT_CONFIG(transposeproxymodel)
#  define QT_NO_TRANSPOSEPROXYMODEL
#endif

// "Supports month and day names in dates."
//
#define QT_FEATURE_textdate 1
#if !QT_CONFIG(textdate)
#  define QT_NO_TEXTDATE
#endif

// "Provides conversion between dates and strings."
//
#define QT_FEATURE_datestring 1
#if !QT_CONFIG(datestring)
#  define QT_NO_DATESTRING
#endif

// "Provides fast file system iteration."
//
#define QT_FEATURE_filesystemiterator 1
#if !QT_CONFIG(filesystemiterator)
#  define QT_NO_FILESYSTEMITERATOR
#endif

// "Provides an interface for monitoring files and directories for
// modifications."
//
#define QT_FEATURE_filesystemwatcher 1
#if !QT_CONFIG(filesystemwatcher)
#  define QT_NO_FILESYSTEMWATCHER
#endif

// "Provides a framework for gestures."
//
#define QT_FEATURE_gestures 1
#if !QT_CONFIG(gestures)
#  define QT_NO_GESTURES
#endif

// "Support the Islamic Civil calendar"
//
#define QT_FEATURE_islamiccivilcalendar 1

// "Support the Jalali (Persian) calendar"
//
#define QT_FEATURE_jalalicalendar 1

#define QT_FEATURE_regularexpression 1
#if !QT_CONFIG(regularexpression)
#  define QT_NO_REGULAREXPRESSION
#endif

// "Provides persistent application settings."
//
#define QT_FEATURE_settings 1
#if !QT_CONFIG(settings)
#  define QT_NO_SETTINGS
#endif

// "Provides an I/O device that operates on temporary files."
//
#define QT_FEATURE_temporaryfile 1
#if !QT_CONFIG(temporaryfile)
#  define QT_NO_TEMPORARYFILE
#endif

// "Provides support for time-zone handling."
//
#define QT_FEATURE_timezone 1

// "Provides support for extracting the top level domain from URLs.
//
#define QT_FEATURE_topleveldomain 1

// "Supports translations using QObject::tr()."
//
#define QT_FEATURE_translation 1
#if !QT_CONFIG(translation)
#  define QT_NO_TRANSLATION
#endif

// "Provides a simple streaming API for XML."
//
#define QT_FEATURE_xmlstream 1
#if !QT_CONFIG(xmlstream)
#  define QT_NO_XMLSTREAM
#endif
#define QT_FEATURE_xmlstreamreader 1
#if !QT_CONFIG(xmlstreamreader)
#  define QT_NO_XMLSTREAMREADER
#endif
#define QT_FEATURE_xmlstreamwriter 1
#if !QT_CONFIG(xmlstreamwriter)
#  define QT_NO_XMLSTREAMWRITER
#endif

// "Provides a higher-level abstraction of environment variables."
//
#define QT_FEATURE_processenvironment 1
#if !QT_CONFIG(processenvironment)
#  define QT_NO_PROCESSENVIRONMENT
#endif

// "Supports external process invocation."
//
#define QT_FEATURE_process 1
#if !QT_CONFIG(process)
#  define QT_NO_PROCESS
#endif

#define QT_FEATURE_sharedmemory 1
#if !QT_CONFIG(sharedmemory)
#  define QT_NO_SHAREDMEMORY
#endif

#define QT_FEATURE_systemsemaphore 1
#if !QT_CONFIG(systemsemaphore)
#  define QT_NO_SYSTEMSEMAPHORE
#endif

// Always enable because doubleconversion is packaged for build2.
//
// This library provides routines to convert IEEE single and double floats to
// and from string representations. Qt bundles their own copy under 3rdparty/.
//
// #define QT_FEATURE_doubleconversion 1 // Moved from private
// #if !QT_CONFIG(doubleconversion)
// #  define QT_NO_DOUBLECONVERSION
// #endif

#define QT_FEATURE_glib -1 // Moved from private
#if !QT_CONFIG(glib)
#  define QT_NO_GLIB
#endif

// Disabled upstream if ICU is used.
//
#define QT_FEATURE_iconv -1 // Moved from private.
#if !QT_CONFIG(iconv)
#  define QT_NO_ICONV
#endif

#if defined(BUILD2_AUTOCONF_MACOS) && QT_CONFIG(appstore_compliant)
#  define QT_POSIX_IPC
#endif

// Define QT_NO_NATIVE_POLL if QT_FEATURE_poll_select is enabled (the latter
// is done in qtcore-config_p.h.in -- look for the HAVE_*POLL* checks).
//
// We can't check QT_FEATURE_poll_select directly because private features are
// not visible in the public module config headers.
//
#undef qtcore_config_HAVE_PPOLL
#ifndef qtcore_config_HAVE_PPOLL
#  undef qtcore_config_HAVE_POLLTS
#  ifndef qtcore_config_HAVE_POLLTS
#    undef qtcore_config_HAVE_POLL
#    ifndef qtcore_config_HAVE_POLL
#      ifndef _WIN32
#        define QT_NO_NATIVE_POLL
#      endif
#    endif
#  endif
#endif

#undef qtcore_config_HAVE_POSIX_MONOTONIC
#ifndef qtcore_config_HAVE_POSIX_MONOTONIC
#  define QT_NO_CLOCK_MONOTONIC
#endif

#undef qtcore_config_HAVE_INOTIFY
#ifdef qtcore_config_HAVE_INOTIFY
#  define QT_FEATURE_inotify 1
#else
#  define QT_FEATURE_inotify -1
#  define QT_NO_INOTIFY
#endif

// (QLibrary) "Provides a wrapper for dynamically loaded libraries."
//
#undef qtcore_config_HAVE_DLOPEN
#if defined(qtcore_config_HAVE_DLOPEN) || defined(_WIN32)
#  define QT_FEATURE_library 1
#else
#  define QT_FEATURE_library -1
#  define QT_NO_LIBRARY
#endif

#undef qtcore_config_HAVE_EVENTFD
#ifndef qtcore_config_HAVE_EVENTFD
#  define QT_NO_EVENTFD
#endif

#undef qtcore_config_HAVE_THREADSAFE_CLOEXEC
#ifdef qtcore_config_HAVE_THREADSAFE_CLOEXEC
#  define QT_THREADSAFE_CLOEXEC
#endif

#define QT_FEATURE_std_atomic64 1
#define QT_FEATURE_cxx11_future 1
