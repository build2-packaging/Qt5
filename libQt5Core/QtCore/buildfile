intf_libs = # Interface dependencies.
import impl_libs  = libicuuc%lib{icuuc}
import impl_libs += libicui18n%lib{icui18n}

import! [metadata] moc = Qt5Moc%exe{qt5moc}

windows = ($cxx.target.class == 'windows')
unix    = ($cxx.target.class != 'windows')
linux   = ($cxx.target.class == 'linux')
freebsd = ($cxx.target.system == 'freebsd')
openbsd = ($cxx.target.system == 'openbsd')
netbsd  = ($cxx.target.system == 'netbsd')
macos   = ($cxx.target.class == 'macos')

# Source files.
#
src = kernel/qabstracteventdispatcher   \
      kernel/qabstractnativeeventfilter \
      kernel/qbasictimer                \
      kernel/qcoreapplication           \
      kernel/qcoreevent                 \
      kernel/qcoreglobaldata            \
      kernel/qdeadlinetimer             \
      kernel/qelapsedtimer              \
      kernel/qeventloop                 \
      kernel/qmetaobject                \
      kernel/qmetaobjectbuilder         \
      kernel/qmetatype                  \
      kernel/qmath                      \
      kernel/qmimedata                  \
      kernel/qobject                    \
      kernel/qobjectcleanuphandler      \
      kernel/qpointer                   \
      kernel/qsharedmemory              \
      kernel/qsignalmapper              \
      kernel/qsocketnotifier            \
      kernel/qsystemerror               \
      kernel/qsystemsemaphore           \
      kernel/qtestsupport_core          \
      kernel/qtimer                     \
      kernel/qtranslator                \
      kernel/qvariant

# Headers to be moc'ed.
#
moc_hdr = qabstracteventdispatcher              \
          qcoreapplication                      \
          qcoreevent                            \
          qeventloop                            \
          qmimedata                             \
          qnamespace                            \
          qobject                               \
          qobjectcleanuphandler                 \
          qsignalmapper                         \
          qsharedmemory                         \
          qsocketnotifier                       \
          qtimer                                \
          qtranslator                           \
          private/qeventdispatcher_unix_p       \
          private/qeventdispatcher_cf_p

# Source files to be moc'ed.
#
moc_src = kernel/qtimer

# UNIX source files.
#
unix_src = kernel/qcore_unix                    \
           kernel/qeventdispatcher_unix         \
           kernel/qsharedmemory_posix           \
           kernel/qsharedmemory_systemv         \
           kernel/qsharedmemory_unix            \
           kernel/qsystemsemaphore_posix        \
           kernel/qsystemsemaphore_systemv      \
           kernel/qsystemsemaphore_unix         \
           kernel/qtimerinfo_unix

# Windows source files.
#
win_src = kernel/qcoreapplication_win   \
          kernel/qelapsedtimer_win      \
          kernel/qeventdispatcher_win   \
          kernel/qsharedmemory_win      \
          kernel/qsystemsemaphore_win   \
          kernel/qwineventnotifier      \
          kernel/qwinregistry

# Mac OS source files.
#
macos_src = kernel/qcfsocketnotifier    \
            kernel/qcoreapplication_mac \
            kernel/qelapsedtimer_mac

# Define the Objective-C++ source file type.
#
define mm: file
mm{*}: extension = mm

macos_mm = kernel/qcore_foundation  \
           kernel/qcore_mac         \
           kernel/qeventdispatcher_cf

# Mac OS Objective-C++ source files to be moc'ed.
#
moc_mm = kernel/qeventdispatcher_cf

# Headers, source files, and libraries.
#
lib{Qt5Core}: hxx{** Q*.} cxx{$src} libul{Qt5CoreMeta}

# The "metadata library": its purpose is to make sure all the imported
# libraries are resolved for the ad hoc .mm compilation rules below.
#
libul{Qt5CoreMeta}: $impl_libs $intf_libs

# Generated headers.
#
gen_hdr = qconfig       private/qconfig_p       \
          qtcore-config private/qtcore-config_p \

# Generated headers and source files.
#
lib{Qt5Core}: hxx{$gen_hdr}
lib{Qt5Core}: global/cxx{qconfig-install}: for_install = true
lib{Qt5Core}: global/cxx{qconfig-develop}: for_install = false

# Platform-specific source files.
#
lib{Qt5Core}: cxx{$unix_src}:                 include = $unix
lib{Qt5Core}: cxx{kernel/qelapsedtimer_unix}: include = ($unix && ! $macos)
lib{Qt5Core}: cxx{$win_src}:                  include = $windows
lib{Qt5Core}: cxx{$macos_src}:                include = $macos

# Declare the dependency of the library target on the Objective-C++ source
# files via the corresponding object files.
#
for n: $macos_mm
{
  obja{$(n).a.o}: mm{$n}
  objs{$(n).so.o}: mm{$n}
}

liba{Qt5Core}: obja{$regex.apply($macos_mm,'(.+)','\1.a.o')}: \
  include = $macos
libs{Qt5Core}: objs{$regex.apply($macos_mm,'(.+)','\1.so.o')}: \
  include = $macos

# Rules for compiling Objective-C++ source files into object files.
#
# Note: these rules are only used on Mac OS (so no -fPIC, etc).
#
obja{~'/(.*).a/'}: mm{~'/\1/'} libua{Qt5CoreMeta}
{{
  dep_poptions = $cxx.lib_poptions(libua{Qt5CoreMeta}, obja)
  depdb hash $dep_poptions
  depdb dyndep "-I$out_root/QtCore" "-I$src_root/QtCore"                \
               --what=header --default-type=h                           \
               -- $cxx.path $cc.poptions $cxx.poptions $dep_poptions    \
                  $cc.coptions $cxx.coptions $cxx.mode -M -MG $path($<[0])
  diag obj-c++ ($<[0])
  $cxx.path $cc.poptions $cxx.poptions $dep_poptions    \
            $cc.coptions $cxx.coptions $cxx.mode        \
            -o $path($>) -c -x objective-c++ $path($<[0])
}}

objs{~'/(.*).so/'}: mm{~'/\1/'} libus{Qt5CoreMeta}
{{
  dep_poptions = $cxx.lib_poptions(libus{Qt5CoreMeta}, objs)
  depdb hash $dep_poptions
  depdb dyndep "-I$out_root/QtCore" "-I$src_root/QtCore"                \
               --what=header --default-type=h                           \
               -- $cxx.path $cc.poptions $cxx.poptions $dep_poptions    \
                  $cc.coptions $cxx.coptions $cxx.mode -M -MG $path($<[0])
  diag obj-c++ ($<[0])
  $cxx.path $cc.poptions $cxx.poptions $dep_poptions    \
            $cc.coptions $cxx.coptions $cxx.mode        \
            -o $path($>) -c -x objective-c++ $path($<[0])
}}

# Rule to generate a header with C++ compiler's predefined macros. It is used
# to make them available to moc.
#
# This is necessary because moc's (built-in) preprocessor evaluates conditions
# and expands macros and thus the set of defined macros can affect its
# output. For example, signals and/or slots can be defined conditionally.
#
# Not all compilers have a mode that produces such a macro list. GCC, Clang,
# and the Intel compiler do, but MSVC (for one) does not.
#
# The upstream build does not generate this header unless the compiler
# supports such a mode (that is, moc gets no macro definitions at all). The
# only exception is MSVC in which case Qt5 uses qmake to produce the required
# output (by passing /Bx<path-to-qmake> to cl.exe, specifying an alternative
# preprocessor executable), and Qt6 (via CMake) does nothing except for adding
# the WIN32 macro to moc's definitions. We emulate the Qt6 behavior here for
# now.
#
# Note also that this approach is not limited to the Qt libraries themselves:
# applications may have preprocessor directives that affect the moc output and
# thus will either need to do something similar or supply the necessary macro
# definitions manually. As a result, it may make sense to provide a utility
# (probably as part of the moc package, maybe call it moc-predefs) that knows
# how to extract this list for various compilers (we could just pass to it the
# compiler id and maybe the target followed by the compiler command line and
# it can decide on the best method, potentially invoking the compiler,
# including for MSVC).
#
hxx{moc_predefs}: mkspecs/features/data/cxx{dummy}
%
if ($cxx.id != 'msvc')
{{
  diag gen ($>[0])
  $cxx.path $cc.poptions $cxx.poptions $cc.coptions $cxx.coptions $cxx.mode \
            -o $path($>) -dM -E $path($<)
}}
else
{{
  diag gen ($>[0])
  cat <<EOI >$path($>)
  #define _WIN32
  #define WIN32
  EOI
}}

# Dependencies involving source files generated by moc from headers.
#
# @@ Have to list hxx{moc_predefs} here to make dist work -- why?
#
for s: hxx{$moc_hdr}
{
  n = $name($s)
  lib{Qt5Core}: cxx{moc_$n}: include = adhoc
  cxx{moc_$n}: $s hxx{moc_predefs}
}

# Target type for source file generated by moc from a source file.
#
define moc: cxx
moc{*}: extension = moc

# Dependencies involving source files generated by moc from source files.
#
for s: cxx{$moc_src} mm{$moc_mm}
{
  n = $name($s)
  lib{Qt5Core}: moc{$n}: include = adhoc
  moc{$n}: $s hxx{moc_predefs}
}

# Rule to run moc on a header file.
#
# Use -f to override the path moc uses to #include the input file, which is
# relative to the output directory, with just the name of the input file.
#
# Explicitly list the generated headers as dependencies in case the
# moc-generated file includes any of them (if only indirectly). Note that,
# because moc's `--output-make-dep` mode (which produces a list of header
# dependencies for the input file) silently omits non-existent headers from
# its output, it does not support generated headers and thus there is no
# choice but to declare these dependencies manually.
#
# Note that hxx{moc_predefs} must always be in position 1.
#
# @@ TODO: use depdb-dyndep --byproduct once available.
#
<cxx{~'/moc_(.*)/'}>: hxx{~'/\1/'} hxx{moc_predefs $gen_hdr} $moc
{{
  diag moc ($<[0])
  $moc --include $path($<[1]) -f $name($<[0]).$extension($<[0]) \
       $cc.poptions $cxx.poptions $path($<[0]) -o $path($>[0])
}}

# Rule to run moc on a source file.
#
# See the header-input moc rule regarding the header prerequisites.
#
<moc{~'/(.*)/'}>: cxx{~'/\1/'} hxx{moc_predefs $gen_hdr} $moc
{{
  diag moc ($<[0])
  $moc --include $path($<[1]) \
       $cc.poptions $cxx.poptions $path($<[0]) -o $path($>[0])
}}

# Rule to run moc on an Objective-C++ source file.
#
# See the header-input moc rule regarding the header prerequisites.
#
<moc{~'/(.*)/'}>: mm{~'/\1/'} hxx{moc_predefs $gen_hdr} $moc
{{
  diag moc ($<[0])
  $moc --include $path($<[1]) \
       $cc.poptions $cxx.poptions $path($<[0]) -o $path($>[0])
}}

# Generated headers.
#
# In the Qt source code the features (QT_FEATURE_foo macros) are checked using
# the QT_CONFIG(foo) macro (defined in qglobal.h) which will not compile
# unless the macro is defined and has a value of 1 or -1.
#
# @@ To find usage instances, grep under ../upstream/qtbase/ for
#    '(qtConfig|QT_CONFIG)\(<feature-name>\)'
#
# The files qtbase/configure.json and qtbase/src/corelib/configure.json are
# the sources used by qtbase/mkspecs/features/qt_configure.prf to generate
# qtconfig{,_p}.h and qtcore-config{,_p}.h, respectively. Entries in the
# `features` array in configure.json files correspond to .prf files under
# upstream/qtbase/mkspecs/features/. See https://wiki.qt.io/Qt5_Build_System.
#
# The configure.json files declare dependencies between features so be sure to
# consult them before disabling or enabling any features.
#

# General public configuration header. Included by other Qt libraries via
# QtCore/qglobal.h.
#
# See the .in files for more information.
#
hxx{qconfig}: in{qconfig}
{
  QT_VERSION_STR="$version.major.$version.minor.$version.patch"
  QT_VERSION_MAJOR="$version.major"
  QT_VERSION_MINOR="$version.minor"
  QT_VERSION_PATCH="$version.patch"

  QT_FEATURE_framework = ($macos ? 1 : -1)

  # Given that SSE4.2 support was added to GCC in version 4.3 (2008), and
  # AVX512 support in version 4.9 (2014), assume all versions of SSE and all
  # versions of AVX are supported on all i686 and x86_64 compilers. Disable
  # SSE and AVX on all other targets.
  #
  compiler_supports_sse_avx = ($cxx.target.cpu == 'x86_64' ||       \
                               $cxx.target.cpu == 'i686'            \
                               ? 1                                  \
                               : -1)

  # F16C has been supported since Intel's Ivy Bridge (2012) and AMD's
  # Bulldozer (2011). Added to GCC 4.6.4 (2013) at the latest. So, like SSE
  # and AVX, assume it's supported on all i686 and x86_64 compilers.
  #
  QT_COMPILER_SUPPORTS_F16C = $compiler_supports_sse_avx
}

# General private configuration header. Included by a few other Qt libraries
# via QtCore/qglobal_p.h.
#
# See the .in file for more information.
#
private/hxx{qconfig_p}: private/in{qconfig_p}
{
  QT_FEATURE_dlopen          = ($macos || $windows ? -1 : 1)
  QT_FEATURE_posix_fallocate = ($linux || $freebsd || $openbsd ? 1 : -1)
}

# Public QtCore library configuration (mostly high-level features). Included
# by other Qt libraries via QtCore/qglobal.h.
#
# See the .in file for more information.
#
hxx{qtcore-config}: in{qtcore-config}

# Private QtCore library configuration (lower-level features and
# settings). Included by a few other Qt libraries via QtCore/qglobal_p.h.
#
# See the .in file for more information.
#
private/hxx{qtcore-config_p}: private/in{qtcore-config_p}
{
  QT_FEATURE_futimens   = ($windows ? -1 : 1)
  QT_FEATURE_getauxval  = ($linux ? 1 : -1)
  QT_FEATURE_getentropy = ($windows || $netbsd ? -1 : 1)
  QT_FEATURE_glibc      = ($linux ? 1 : -1)
  QT_FEATURE_inotify    = ($linux ? 1 : -1)
  QT_FEATURE_linkat     = ($linux ? 1 : -1)
  QT_FEATURE_renameat2  = ($linux ? 1 : -1)
  QT_FEATURE_syslog     = ($windows ? -1 : 1)

  QT_FEATURE_poll_select = -1
  QT_FEATURE_poll_ppoll  = ($linux || $freebsd || $openbsd ? 1 : -1)
  QT_FEATURE_poll_poll   = ($macos ? 1 : -1)
  QT_FEATURE_poll_pollts = ($netbsd ? 1 : -1)
}

# global/qconfig.cpp:
#
# This file provides information relating to installation paths. It is
# included by global/qlibraryinfo.cpp (so we don't compile it). In upstream it
# is generated during the configure step (qtbase/configure.pri).
#
# In order to support different installation paths for the installed and
# uninstalled cases in build2 we turn qconfig.cpp into a real file (that is,
# not generated) and turn its static variable and macro definitions into
# extern variable declarations. Then we generate two source files,
# qconfig-install.cpp and qconfig-develop.cpp, that define the variables to
# values appropriate for the installed and uninstalled cases, respectively,
# and we use (above) the `for_install` prerequisite-specific variable to
# control which of the two gets linked in each case.
#
# See also comments in qconfig.cpp.in.
#
lib{Qt5Core}: global/cxx{qconfig}: include = adhoc

# Installed case: Here the installation prefix is an absolute path and the
# other paths are all relative (to the prefix).
#
# Note that while this object file should only be linked when we are
# installing, it will be compiled even in the uninstalled case where we may
# have no install.root.
#
global/cxx{qconfig-install}:
{
  i = ($install.root != [null]

  # Values of the installation paths. Make the $install.* paths relative to
  # $install.root.
  #
  prefix  = [path] ($i ? $install.root : .) # @@ TODO: other places

  doc     = [path] $regex.replace($install.resolve($install.doc),$prefix,'')
  incl    = [path] $regex.replace($install.resolve($install.include),$prefix,'')
  lib     = [path] $regex.replace($install.resolve($install.lib),$prefix,'')
  bin     = [path] $regex.replace($install.resolve($install.bin),$prefix,'')
  libexec = [path] $regex.replace(\
                     ($windows ? $bin : $install.resolve($install.libexec)),\
                     $prefix,'')
  plugins = [path] $lib
  imports = [path] $lib
  qml     = [path] $lib
  data    = [path] $regex.replace($install.resolve($install.data),$prefix,'')
  arch_data    = [path] $data
  translations = [path] translations
  examples     = [path] examples
  tests        = [path] tests
}

# Uninstalled case: Here the installation prefix is / and the other
# directories are all absolute paths (because the source and output
# directories may not have a longer common prefix).
#
global/cxx{qconfig-develop}:
{
  # Values of the installation paths.
  #
  # @@ TODO: make prefix $root().
  #
  prefix       = [path] /
  doc          = [path] $out_root/doc
  incl         = [path] $src_root
  lib          = [path] $out_root
  libexec      = [path] $out_root
  bin          = [path] $out_root
  plugins      = [path] $out_root/plugins
  imports      = [path] $out_root
  qml          = [path] $out_root
  arch_data    = [path] $src_root
  data         = [path] $src_root
  translations = [path] $out_root/translations
  examples     = [path] $src_root/examples
  tests        = [path] $src_root/tests
}

# Installed and uninstalled cases.
#
global/cxx{qconfig-install qconfig-develop}: global/in{qconfig}
{
  # A path appended to the path of the directory containing the installed
  # QtCore library to get to the prefix path.
  #
  # For example, if the prefix is /usr/local and the library is installed in
  # /usr/local/lib, upstream would do "/usr/local/lib" + "/" + "../" to get
  # "/usr/local". Replace every directory name in $lib with `..` to get the
  # relative path.
  #
  # @@ TMP Looks like regex.replace() works as expected but the assignment
  #        modifies the result (instead of upstream's single trailing slash we
  #        end up with two or none).
  #
  #    $ sed -E 's%/?[^/]+%../%g' <<<"/foo/bar"
  #    ../../
  #    $regex.replace(/foo/bar,'/?[^/]+','../')
  #    ../../
  #
  #    With path = /foo/bar:
  #
  #    lib_to_prefix = [string] $regex.replace(/foo/bar,'/?[^/]+','../')
  #    ../../
  #    lib_to_prefix = [path] $regex.replace(/foo/bar,'/?[^/]+','../')
  #    ../..
  #
  #    With path = $lib (real value: /tmp/installed (no trailing slash))
  #
  #    lib_to_prefix = [string] $regex.replace($lib,'/?[^/]+','../')
  #    ../..//
  #    lib_to_prefix = [path] $regex.replace($lib,'/?[^/]+','../')
  #    ../..
  #
  #    @@ TODO Currently working around this with "$lib_to_prefix$/" (trailing
  #       slash) in qconfig.cpp.in. However I have since discovered that
  #       upstream always appends a slash to this value so they end up with
  #       double slashes, but then pass it through QtDir::cleanPath() which
  #       would presumably remove the redundant slash. So it's likely that
  #       none of this even matters.
  #
  lib_to_prefix = [path] $regex.replace($lib,'/?[^/]+','../')

  # The directory path containing user application settings. Ignored on
  # Windows where the registry is used instead.
  #
  settingspath = ($macos ? /Library/Preferences/Qt : etc/xdg)

  # The offsets of the beginning of each substring within the
  # qt_configure_strs string which contains the installation path values
  # defined above.
  #
  o_doc            = [uint64] 0
  o_incl           = $size($doc)
  o_incl          += 1
  o_incl          += $o_doc
  o_lib            = $size($incl)
  o_lib           += 1
  o_lib           += $o_incl
  o_libexec        = $size($lib)
  o_libexec       += 1
  o_libexec       += $o_lib
  o_bin            = $size($libexec)
  o_bin           += 1
  o_bin           += $o_libexec
  o_plugins        = $size($bin)
  o_plugins       += 1
  o_plugins       += $o_bin
  o_imports        = $size($plugins)
  o_imports       += 1
  o_imports       += $o_plugins
  o_qml            = $size($imports)
  o_qml           += 1
  o_qml           += $o_imports
  o_arch_data      = $size($qml)
  o_arch_data     += 1
  o_arch_data     += $o_qml
  o_data           = $size($arch_data)
  o_data          += 1
  o_data          += $o_arch_data
  o_translations   = $size($data)
  o_translations  += 1
  o_translations  += $o_data
  o_examples       = $size($translations)
  o_examples      += 1
  o_examples      += $o_translations
  o_tests          = $size($examples)
  o_tests         += 1
  o_tests         += $o_examples

  # Escape backslashes on Windows. Note: must be done after offset
  # calculations.
  #
  doc = $regex.replace($doc, '\', '\\')
}

# Build options.
#
cxx.poptions =+ "-I$out_root" "-I$src_root"                     \
                "-I$out_root/QtCore" "-I$src_root/QtCore"       \
                "-I$out_root/QtCore/private" "-I$src_root/QtCore/private"

# @@ TODO When we do corelib/global/: QFLOAT16_INCLUDE_FAST: affects
#    global/qfloat16.cpp. May require inclusion of qfloat16_f16c.c. Also see:
#    QT_COMPILER_SUPPORTS_F16C in qconfig.h.in; global/global.pri.
#
cxx.poptions += -DQT_BUILDING_QT -DQT_BUILD_CORE_LIB            \
                -DQT_NO_LINKED_LIST                             \
                -DQT_NO_JAVA_STYLE_ITERATORS                    \
                -DQT_NO_USING_NAMESPACE                         \
                -DQT_NO_FOREACH                                 \
                -DQT_NO_NARROWING_CONVERSIONS_IN_CONNECT        \
                -DQT_ASCII_CAST_WARNINGS                        \
                -DQT_MOC_COMPAT                                 \
                -DQT_USE_QSTRINGBUILDER                         \
                -DQT_DEPRECATED_WARNINGS                        \
                -D_REENTRANT                                    \
                -DQT_DEPRECATED_WARNINGS_SINCE=0x060000

# @@ TODO -DQT_NO_DEBUG (as one would expect, upstream defines it for release
#    builds).
#

if $windows
{
  cxx.poptions += -DQT_DISABLE_DEPRECATED_BEFORE=0x040800       \
                  -D_CRT_SECURE_NO_WARNINGS                     \
                  -D_USE_MATH_DEFINES                           \
                  -DUNICODE                                     \
                  -D_UNICODE                                    \
                  -DWIN32
}
else
{
  cxx.poptions += -DQT_DISABLE_DEPRECATED_BEFORE=0x050000 \
                  -DQT_NO_CAST_TO_ASCII

  if $unix
    cxx.poptions += -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE
}

# Add platform-specific header directories, libraries, compilation options,
# and macro definitions.
#
# Every directory under mkspecs/ contains a unique `qplatformdefs.h`.
#
# Note that Mac OS with GCC is not supported by upstream (see README-DEV for
# details).
#
switch $cxx.target.class, $cxx.id, $cxx.target.system
{
  case 'linux', 'gcc'
    cxx.poptions += "-I$src_root/QtCore/mkspecs/linux-g++"
  case 'linux', 'clang'
    cxx.poptions += "-I$src_root/QtCore/mkspecs/linux-clang"
  case 'macos', 'clang-apple'
  {
    cxx.poptions += "-I$src_root/QtCore/mkspecs/macx-clang"
    cxx.libs     += -framework AppKit          \
                    -framework CoreServices    \
                    -framework Foundation      \
                    -framework IOKit
  }
  case 'bsd', 'clang', 'freebsd'
    cxx.poptions += "-I$src_root/QtCore/mkspecs/freebsd-clang"
  case 'bsd', 'gcc', 'openbsd'
    cxx.poptions += "-I$src_root/QtCore/mkspecs/openbsd-g++"
  case 'bsd', 'gcc', 'netbsd'
    cxx.poptions += "-I$src_root/QtCore/mkspecs/netbsd-g++"
  case 'windows', 'msvc'
  {
    cxx.poptions += "-I$src_root/QtCore/mkspecs/win32-msvc" \
                    -D_ENABLE_EXTENDED_ALIGNED_STORAGE

    cxx.libs += ole32.lib advapi32.lib shell32.lib netapi32.lib
  }
  case 'windows', 'msvc-clang' | 'clang'
  {
    cxx.poptions += "-I$src_root/QtCore/mkspecs/win32-clang-msvc" \
                    -D_ENABLE_EXTENDED_ALIGNED_STORAGE

    cxx.libs += ole32.lib advapi32.lib shell32.lib netapi32.lib version.lib
  }
  case 'windows', 'gcc', 'mingw32'
  {
    cxx.poptions += "-I$src_root/QtCore/mkspecs/win32-g++" \
                    -DMINGW_HAS_SECURE_API=1
    cxx.coptions += -fno-keep-inline-dllexport
    cxx.libs     += -lole32 -ladvapi32 -lshell32 -lnetapi32 -lversion \
                    -luuid
  }
}

# Export options.
#
lib{Qt5Core}:
{
  cxx.export.poptions = "-I$out_root" "-I$src_root"     \
                        "-I$out_root/QtCore" "-I$src_root/QtCore"
  cxx.export.libs = $intf_libs
}

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{Qt5Core}: bin.lib.version = "-$version.project_id"
else
  lib{Qt5Core}: bin.lib.version = "-$version.major.$version.minor"

# Install public headers into the QtCore/ subdirectory of, say, /usr/include/.
#
private/hxx{*}: install = false
hxx{*}:
{
  install = include/QtCore/
}
