using in

using c

cxx.std = latest

using cxx

hxx{*}: extension = h
cxx{*}: extension = cpp

# Assume headers are importable unless stated otherwise.
#
hxx{*}: cxx.importable = true

# If true, build without -DQT_NO_DEBUG.
#
config [bool] config.libQt5Gui.debug ?= false

linux   = ($cxx.target.class == 'linux')
bsd     = ($cxx.target.class == 'bsd')
windows = ($cxx.target.class == 'windows')
macos   = ($cxx.target.class  == 'macos')

# Define the .moc file type (C++ source file generated by moc from a C++
# source file).
#
define moc: cxx
moc{*}: extension = moc

# Path to libQt5Core's moc_predefs.h header.
#
import corelib = libQt5Core%lib{Qt5Core}
moc_predefs_path = $($corelib: libQt5Core.moc_predefs_path)

# Define the Objective-C++ source file type.
#
define mm: file
mm{*}: extension = mm

# Define the Qt resource collection file type.
#
define qrc: file
qrc{*}: extension = qrc

if! $config.libQt5Gui.debug
  cc.poptions += -DQT_NO_DEBUG

# Define because QtWidgets is not yet being built.
#
# @@ Although this is only referenced by the Cocoa plugin it's less likely to
#    be forgotten about here.
#
cc.poptions += -DQT_NO_WIDGETS

# Every directory under mkspecs/ contains a unique `qplatformdefs.h`.
#
# Note that Mac OS with GCC is not supported by upstream (see README-DEV for
# details).
#
switch $cxx.target.class, $cxx.id, $cxx.target.system
{
  case 'linux', 'gcc'
    cc.poptions =+ "-I$src_root/mkspecs/linux-g++"
  case 'linux', 'clang'
    cc.poptions =+ "-I$src_root/mkspecs/linux-clang"
  case 'macos', 'clang-apple'
    cc.poptions =+ "-I$src_root/mkspecs/macx-clang"
  case 'bsd', 'clang', 'freebsd'
    cc.poptions =+ "-I$src_root/mkspecs/freebsd-clang"
  case 'bsd', 'gcc', 'openbsd'
    cc.poptions =+ "-I$src_root/mkspecs/openbsd-g++"
  case 'bsd', 'gcc', 'netbsd'
    cc.poptions =+ "-I$src_root/mkspecs/netbsd-g++"
  case 'windows', 'msvc'
    cc.poptions =+ "-I$src_root/mkspecs/win32-msvc"
  case 'windows', 'msvc-clang' | 'clang'
    cc.poptions =+ "-I$src_root/mkspecs/win32-clang-msvc"
  case 'windows', 'gcc', 'mingw32'
  {
    cc.poptions =+ "-I$src_root/mkspecs/win32-g++"
    cc.coptions += -fno-keep-inline-dllexport
  }
}

cc.poptions += -DQT_DEPRECATED_WARNINGS        \
               -DQT_NO_JAVA_STYLE_ITERATORS    \
               -DQT_NO_LINKED_LIST             \
               -DQT_NO_NARROWING_CONVERSIONS_IN_CONNECT

# Disable exceptions.
#
switch $cxx.class
{
  case 'gcc'
  {
    cxx.poptions += -DQT_NO_EXCEPTIONS
    cxx.coptions += -fno-exceptions
  }
  case 'msvc'
  {
    cxx.poptions += -DQT_NO_EXCEPTIONS
    cxx.coptions += /EHs- /EHc-
  }
}

if $windows
{
  cc.poptions += -DUNICODE -D_UNICODE           \
                 -DWIN32                        \
                 -D_CRT_SECURE_NO_WARNINGS      \
                 -D_USE_MATH_DEFINES

  if ($cxx.target.system == 'mingw32')
    cc.poptions += -DMINGW_HAS_SECURE_API=1
  else
    cc.poptions += -D_ENABLE_EXTENDED_ALIGNED_STORAGE
}
else
  cc.poptions += -D_LARGEFILE64_SOURCE -D_LARGEFILE_SOURCE

# Don't install headers in mkspecs/ and 3rdparty/ (which are at the root level
# and are shared between QtGui/ and QtGuiPlugins/).
#
hxx{mkspecs/* 3rdparty/*}: install = false

# Common options, etc., for all the plugins.
#
QtGuiPlugins/
{
  platforms/
  {
    cxx.poptions =+ "-I$out_root/QtGuiPlugins" "-I$src_root/QtGuiPlugins"

    # Poptions used in multiple scopes (but not for all objects).
    #
    platforms_poptions =                                                    \
      -DQT_ASCII_CAST_WARNINGS                                              \
      -DQT_NO_CAST_TO_ASCII                                                 \
      -DQT_BUILDING_QT                                                      \
      -DQT_DISABLE_DEPRECATED_BEFORE=($windows ? 0x040800 : 0x050000)       \
      -DQT_DEPRECATED_WARNINGS_SINCE=0x060000                               \
      -DQT_MOC_COMPAT                                                       \
      -DQT_USE_QSTRINGBUILDER

    if ($cxx.class == 'gcc')
      cxx.coptions += -fvisibility=hidden -fvisibility-inlines-hidden
  }

  # Don't install any plugin headers (for static linking the API is presumably
  # declared by the Qt plugin infrastructure).
  #
  hxx{*}: install = false
}
