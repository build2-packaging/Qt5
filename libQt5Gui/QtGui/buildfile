# Note: If anything in this file seems underdocumented it is probably covered
#       in libQt5Core/QtCore/buildfile.
#

import intf_libs  = libQt5Core%lib{Qt5Core}
import impl_libs += libpng%lib{png}
import impl_libs += libharfbuzz%lib{harfbuzz}
import impl_libs += libmd4c%lib{md4c}

# Interface libraries for lib{Qt5GuiPrivate}.
#
import priv_intf_libs = libQt5Core%lib{Qt5CorePrivate}

import! [metadata] moc = Qt5Moc%exe{qt5moc}
import! [metadata] rcc = Qt5Rcc%exe{qt5rcc}

windows = ($cxx.target.class  == 'windows')
linux   = ($cxx.target.class  == 'linux')
bsd     = ($cxx.target.class  == 'bsd')
macos   = ($cxx.target.class  == 'macos')

# C++ source files.
#
src = accessible/qaccessible                    \
      accessible/qaccessiblebridge              \
      accessible/qaccessiblecache               \
      accessible/qaccessibleobject              \
      accessible/qaccessibleplugin              \
      accessible/qplatformaccessibility         \
      animation/qguivariantanimation            \
      image/qbitmap                             \
      image/qbmphandler                         \
      image/qicon                               \
      image/qiconengine                         \
      image/qiconengineplugin                   \
      image/qiconloader                         \
      image/qimage                              \
      image/qimage_compat                       \
      image/qimage_conversions                  \
      image/qimage_ssse3                        \
      image/qimageiohandler                     \
      image/qimagepixmapcleanuphooks            \
      image/qimagereader                        \
      image/qimagereaderwriterhelpers           \
      image/qimagewriter                        \
      image/qmovie                              \
      image/qpaintengine_pic                    \
      image/qpicture                            \
      image/qpictureformatplugin                \
      image/qpixmap                             \
      image/qpixmap_blitter                     \
      image/qpixmap_raster                      \
      image/qpixmapcache                        \
      image/qplatformpixmap                     \
      image/qpnghandler                         \
      image/qppmhandler                         \
      image/qxbmhandler                         \
      image/qxpmhandler                         \
      itemmodels/qstandarditemmodel             \
      kernel/qclipboard                         \
      kernel/qcursor                            \
      kernel/qdnd                               \
      kernel/qdrag                              \
      kernel/qevent                             \
      kernel/qgenericplugin                     \
      kernel/qgenericpluginfactory              \
      kernel/qguiapplication                    \
      kernel/qguivariant                        \
      kernel/qhighdpiscaling                    \
      kernel/qinputdevicemanager                \
      kernel/qinputmethod                       \
      kernel/qinternalmimedata                  \
      kernel/qkeymapper                         \
      kernel/qkeysequence                       \
      kernel/qoffscreensurface                  \
      kernel/qpaintdevicewindow                 \
      kernel/qpalette                           \
      kernel/qpixelformat                       \
      kernel/qplatformclipboard                 \
      kernel/qplatformcursor                    \
      kernel/qplatformdialoghelper              \
      kernel/qplatformdrag                      \
      kernel/qplatformgraphicsbuffer            \
      kernel/qplatformgraphicsbufferhelper      \
      kernel/qplatforminputcontext              \
      kernel/qplatforminputcontextfactory       \
      kernel/qplatforminputcontextplugin        \
      kernel/qplatformintegration               \
      kernel/qplatformintegrationfactory        \
      kernel/qplatformintegrationplugin         \
      kernel/qplatformmenu                      \
      kernel/qplatformnativeinterface           \
      kernel/qplatformoffscreensurface          \
      kernel/qplatformscreen                    \
      kernel/qplatformservices                  \
      kernel/qplatformsessionmanager            \
      kernel/qplatformsharedgraphicscache       \
      kernel/qplatformsurface                   \
      kernel/qplatformsystemtrayicon            \
      kernel/qplatformtheme                     \
      kernel/qplatformthemefactory              \
      kernel/qplatformthemeplugin               \
      kernel/qplatformwindow                    \
      kernel/qrasterwindow                      \
      kernel/qscreen                            \
      kernel/qsessionmanager                    \
      kernel/qshapedpixmapdndwindow             \
      kernel/qshortcutmap                       \
      kernel/qsimpledrag                        \
      kernel/qstylehints                        \
      kernel/qsurface                           \
      kernel/qsurfaceformat                     \
      kernel/qtestsupport_gui                   \
      kernel/qtouchdevice                       \
      kernel/qwindow                            \
      kernel/qwindowsysteminterface             \
      math3d/qgenericmatrix                     \
      math3d/qmatrix4x4                         \
      math3d/qquaternion                        \
      math3d/qvector2d                          \
      math3d/qvector3d                          \
      math3d/qvector4d                          \
      painting/qbackingstore                    \
      painting/qbezier                          \
      painting/qblendfunctions                  \
      painting/qblittable                       \
      painting/qbrush                           \
      painting/qcolor                           \
      painting/qcolorspace                      \
      painting/qcolortransform                  \
      painting/qcolortrclut                     \
      painting/qcompositionfunctions            \
      painting/qcosmeticstroker                 \
      painting/qcssutil                         \
      painting/qdrawhelper                      \
      painting/qdrawhelper_avx2                 \
      painting/qdrawhelper_sse2                 \
      painting/qdrawhelper_sse4                 \
      painting/qdrawhelper_ssse3                \
      painting/qemulationpaintengine            \
      painting/qicc                             \
      painting/qimagescale                      \
      painting/qimagescale_sse4                 \
      painting/qmatrix                          \
      painting/qmemrotate                       \
      painting/qoutlinemapper                   \
      painting/qpagedpaintdevice                \
      painting/qpagelayout                      \
      painting/qpagesize                        \
      painting/qpaintdevice                     \
      painting/qpaintengine                     \
      painting/qpaintengine_blitter             \
      painting/qpaintengine_raster              \
      painting/qpaintengineex                   \
      painting/qpainter                         \
      painting/qpainterpath                     \
      painting/qpathclipper                     \
      painting/qpathsimplifier                  \
      painting/qpdf                             \
      painting/qpdfwriter                       \
      painting/qpen                             \
      painting/qplatformbackingstore            \
      painting/qpolygon                         \
      painting/qrasterizer                      \
      painting/qregion                          \
      painting/qstroker                         \
      painting/qtextureglyphcache               \
      painting/qtransform                       \
      painting/qtriangulatingstroker            \
      painting/qtriangulator                    \
      text/qabstracttextdocumentlayout          \
      text/qcssparser                           \
      text/qdistancefield                       \
      text/qfont                                \
      text/qfontdatabase                        \
      text/qfontengine                          \
      text/qfontengine_qpf2                     \
      text/qfontengineglyphcache                \
      text/qfontmetrics                         \
      text/qfontsubset                          \
      text/qfragmentmap                         \
      text/qglyphrun                            \
      text/qharfbuzzng                          \
      text/qinputcontrol                        \
      text/qplatformfontdatabase                \
      text/qrawfont                             \
      text/qstatictext                          \
      text/qsyntaxhighlighter                   \
      text/qtextcursor                          \
      text/qtextdocument                        \
      text/qtextdocument_p                      \
      text/qtextdocumentfragment                \
      text/qtextdocumentlayout                  \
      text/qtextdocumentwriter                  \
      text/qtextengine                          \
      text/qtextformat                          \
      text/qtexthtmlparser                      \
      text/qtextimagehandler                    \
      text/qtextlayout                          \
      text/qtextlist                            \
      text/qtextmarkdownimporter                \
      text/qtextmarkdownwriter                  \
      text/qtextobject                          \
      text/qtextodfwriter                       \
      text/qtextoption                          \
      text/qtexttable                           \
      text/qzip                                 \
      util/qabstractlayoutstyleinfo             \
      util/qastchandler                         \
      util/qdesktopservices                     \
      util/qgridlayoutengine                    \
      util/qktxhandler                          \
      util/qlayoutpolicy                        \
      util/qpkmhandler                          \
      util/qshaderformat                        \
      util/qshadergenerator                     \
      util/qshadergraph                         \
      util/qshadergraphloader                   \
      util/qshaderlanguage                      \
      util/qshadernode                          \
      util/qshadernodeport                      \
      util/qshadernodesloader                   \
      util/qtexturefiledata                     \
      util/qtexturefilereader                   \
      util/qvalidator

# C source files.
#
src_c = painting/qgrayraster

# Windows C++ source files.
#
win_src = image/qpixmap_win

# Objective-C++ source files.
#
macos_mm = accessible/qaccessiblecache_mac      \
           image/qimage_darwin                  \
           painting/qcoregraphics

# Headers to be moc'ed.
#
moc_hdr = private/QtGui/private/qaccessiblecache_p              \
          private/QtGui/private/qdnd_p                          \
          private/QtGui/private/qhighdpiscaling_p               \
          private/QtGui/private/qinputcontrol_p                 \
          private/QtGui/private/qinputdevicemanager_p           \
          private/QtGui/private/qinternalmimedata_p             \
          private/QtGui/private/qkeymapper_p                    \
          private/QtGui/private/qlayoutpolicy_p                 \
          private/QtGui/private/qshaderlanguage_p               \
          private/QtGui/private/qshapedpixmapdndwindow_p        \
          private/QtGui/private/qtextdocumentlayout_p           \
          private/QtGui/private/qtextimagehandler_p             \
          private/QtGui/qpa/qplatforminputcontextplugin_p       \
          qabstracttextdocumentlayout                           \
          qaccessible                                           \
          qaccessiblebridge                                     \
          qaccessibleplugin                                     \
          qbrush                                                \
          qclipboard                                            \
          qcolorspace                                           \
          qdrag                                                 \
          qevent                                                \
          qfont                                                 \
          qfontdatabase                                         \
          qgenericplugin                                        \
          qguiapplication                                       \
          qiconengineplugin                                     \
          qimage                                                \
          qimageiohandler                                       \
          qinputmethod                                          \
          qkeysequence                                          \
          qmovie                                                \
          qoffscreensurface                                     \
          qpaintdevicewindow                                    \
          qpainter                                              \
          qpalette                                              \
          qpdfwriter                                            \
          qpictureformatplugin                                  \
          qpa/qplatformdialoghelper                             \
          qpa/qplatformgraphicsbuffer                           \
          qpa/qplatforminputcontext                             \
          qpa/qplatformintegrationplugin                        \
          qpa/qplatformmenu                                     \
          qpa/qplatformnativeinterface                          \
          qpa/qplatformsharedgraphicscache                      \
          qpa/qplatformsystemtrayicon                           \
          qpa/qplatformthemeplugin                              \
          qrasterwindow                                         \
          qscreen                                               \
          qsessionmanager                                       \
          qstandarditemmodel                                    \
          qstylehints                                           \
          qsurface                                              \
          qsurfaceformat                                        \
          qsyntaxhighlighter                                    \
          qtextdocument                                         \
          qtextformat                                           \
          qtextlist                                             \
          qtextobject                                           \
          qtexttable                                            \
          qtouchdevice                                          \
          qvalidator                                            \
          qwindow

# C++ source files to be moc'ed.
#
moc_src = image/qpixmapcache \
          util/qdesktopservices

# QMake resource files (.qrc) to be rcc'd.
#
# Note that our qmake_webgradients.qrc is a copy of the one generated by the
# upstream build (not sure why they generate it as it's very similar to
# qpdf.qrc, which is not generated).
#
qrc = painting/qmake_webgradients \
      painting/qpdf

gen_hdr_pub = qtgui-config # Generated public headers.

# Public headers and source files.
#
lib{Qt5Gui}: hxx{** -private/** -{$gen_hdr_pub} +Q*.} hxx{$gen_hdr_pub} \
             cxx{$src} c{$src_c}                                        \

# Private headers.
#
gen_hdr_priv = private/QtGui/private/qtgui-config_p # Generated private headers.

lib{Qt5GuiPrivate}: hxx{private/** -{$gen_hdr_priv}} hxx{$gen_hdr_priv} \
                    $priv_intf_libs

# Included source files.
#
lib{Qt5Gui}: cxx{** -{$src}}: include = adhoc

# Define the Qt resource file type.
#
define qrc: file
qrc{*}: extension = qrc

# Resource files and their inputs.
#
lib{Qt5Gui}: qrc{$qrc}                                  \
             painting/file{webgradients.binaryjson      \
                           qpdfa_metadata.xml}          \
             ../3rdparty/icc/file{sRGB2014.icc}

# The "metadata libraries": their purpose is to make sure all the imported
# libraries are resolved for the ad hoc rules (.mm compilation, moc)
# below. Add lib{Qt5GuiPrivate} as dependency because lib_poptions() only
# works on libul{} targets.
#
# Note: use a rule hint to resolve ambiguity between C and C++ library.
#
[rule_hint=cxx] libul{Qt5GuiIntfMeta}: $intf_libs
[rule_hint=cxx] libul{Qt5GuiImplMeta}: $impl_libs lib{Qt5GuiPrivate}

# A utility library wrapper for lib{Qt5GuiPrivate} in order to get the
# latter's exported include directories in the moc adhoc rules (@@ TMP
# lib_poptions() doesn't accept lib{}, libs{}, or liba{}).
#
[rule_hint=cxx] libul{Qt5GuiPrivateMeta}: lib{Qt5GuiPrivate}

# Platform-specific source files.
#
lib{Qt5Gui}: cxx{$win_src}: include = $windows

# Define the Objective-C++ source file type.
#
define mm: file
mm{*}: extension = mm

# Declare the dependency of the library target on the Objective-C++ source
# files via the corresponding object files.
#
for n: $macos_mm
{
  obja{$(n).a.o}:  mm{$n}
  objs{$(n).so.o}: mm{$n}
}

liba{Qt5Gui}: obja{$regex.apply($macos_mm,'(.+)','\1.a.o')}:  include = $macos
libs{Qt5Gui}: objs{$regex.apply($macos_mm,'(.+)','\1.so.o')}: include = $macos

# Rules for compiling Objective-C++ source files into object files.
#
# Note: these rules are only used on Mac OS (so no -fPIC, etc).
# Note: exclude libua{Qt5GuiMeta} from update during match not to mess
#       up its for-install'ness.
#
# @@ TODO: replace `--update-exclude libu?{Qt5GuiMeta}` with update=unmatch
#          once we have the ability to specify prerequisite-specific variables
#          for pattern prerequisites.
#
obja{~'/(.*).a/'}: mm{~'/\1/'} libua{Qt5GuiIntfMeta Qt5GuiImplMeta}
{{
  dep_poptions = $cxx.lib_poptions(libua{Qt5GuiIntfMeta Qt5GuiImplMeta}, obja)
  depdb hash $dep_poptions
  depdb dyndep "-I$out_root/QtGui" "-I$src_root/QtGui"                  \
               --what=header --default-type=h                           \
               --update-exclude libua{Qt5GuiIntfMeta Qt5GuiImplMeta}    \
               -- $cxx.path $cc.poptions $cxx.poptions $dep_poptions    \
                  $cc.coptions $cxx.coptions $cxx.mode -M -MG $path($<[0])
  diag obj-c++ ($<[0])
  $cxx.path $cc.poptions $cxx.poptions $dep_poptions    \
            $cc.coptions $cxx.coptions $cxx.mode        \
            -o $path($>) -c -x objective-c++ $path($<[0])
}}

objs{~'/(.*).so/'}: mm{~'/\1/'} libus{Qt5GuiIntfMeta Qt5GuiImplMeta}
{{
  dep_poptions = $cxx.lib_poptions(libus{Qt5GuiIntfMeta Qt5GuiImplMeta}, objs)
  depdb hash $dep_poptions
  depdb dyndep "-I$out_root/QtGui" "-I$src_root/QtGui"                  \
               --what=header --default-type=h                           \
               --update-exclude libus{Qt5GuiIntfMeta Qt5GuiImplMeta}    \
               -- $cxx.path $cc.poptions $cxx.poptions $dep_poptions    \
                  $cc.coptions $cxx.coptions $cxx.mode -M -MG $path($<[0])
  diag obj-c++ ($<[0])
  $cxx.path $cc.poptions $cxx.poptions $dep_poptions    \
            $cc.coptions $cxx.coptions $cxx.mode        \
            -o $path($>) -c -x objective-c++ $path($<[0])
}}

# Rule to generate a header with C++ compiler's predefined macros. It is used
# to make them available to moc.
#
hxx{moc_predefs}: mkspecs/features/data/cxx{dummy}
%
if ($cxx.id != 'msvc')
{{
  diag gen ($>[0])
  $cxx.path $cc.poptions $cxx.poptions $cc.coptions $cxx.coptions $cxx.mode \
            -o $path($>) -dM -E $path($<)
}}
else
{{
  diag gen ($>[0])
  cat <<EOI >$path($>)
  #define _WIN32
  #define WIN32
  EOI
}}

# Dependencies involving source files generated by moc from headers (foo.h ->
# moc_foo.cpp).
#
# @@ TODO Put moc outputs from qpa/ headers in that directory?
#
for s: hxx{$moc_hdr}
{
  n = $name($s)
  lib{Qt5Gui}: cxx{moc_$n}: include = adhoc
  cxx{moc_$n}: $s
}

# Most of the above outputs need to be compiled (the rest are included), so
# override `include = adhoc` in those cases.
#
lib{Qt5Gui}: cxx{moc_qaccessible                        \
                 moc_qaccessiblebridge                  \
                 moc_qaccessiblecache_p                 \
                 moc_qaccessibleplugin                  \
                 moc_qbrush                             \
                 moc_qclipboard                         \
                 moc_qcolorspace                        \
                 moc_qdnd_p                             \
                 moc_qdrag                              \
                 moc_qevent                             \
                 moc_qfont                              \
                 moc_qfontdatabase                      \
                 moc_qgenericplugin                     \
                 moc_qhighdpiscaling_p                  \
                 moc_qiconengineplugin                  \
                 moc_qimage                             \
                 moc_qimageiohandler                    \
                 moc_qinputcontrol_p                    \
                 moc_qinputdevicemanager_p              \
                 moc_qinternalmimedata_p                \
                 moc_qkeymapper_p                       \
                 moc_qkeysequence                       \
                 moc_qlayoutpolicy_p                    \
                 moc_qoffscreensurface                  \
                 moc_qpaintdevicewindow                 \
                 moc_qpainter                           \
                 moc_qpalette                           \
                 moc_qpdfwriter                         \
                 moc_qpictureformatplugin               \
                 moc_qplatformdialoghelper              \
                 moc_qplatformgraphicsbuffer            \
                 moc_qplatforminputcontext              \
                 moc_qplatforminputcontextplugin_p      \
                 moc_qplatformintegrationplugin         \
                 moc_qplatformmenu                      \
                 moc_qplatformnativeinterface           \
                 moc_qplatformsharedgraphicscache       \
                 moc_qplatformthemeplugin               \
                 moc_qrasterwindow                      \
                 moc_qscreen                            \
                 moc_qsessionmanager                    \
                 moc_qshaderlanguage_p                  \
                 moc_qshapedpixmapdndwindow_p           \
                 moc_qstylehints                        \
                 moc_qsurface                           \
                 moc_qsurfaceformat                     \
                 moc_qtextdocument                      \
                 moc_qtextformat                        \
                 moc_qtextimagehandler_p                \
                 moc_qtextlist                          \
                 moc_qtextobject                        \
                 moc_qtexttable                         \
                 moc_qtouchdevice                       \
                 moc_qvalidator}

# Target type for source file generated by moc from a source file.
#
define moc: cxx
moc{*}: extension = moc

# Dependencies involving source files generated by moc from source files
# (foo.cpp -> foo.moc).
#
for s: cxx{$moc_src}
{
  n = $name($s)
  lib{Qt5Gui}: moc{$n}: include = adhoc
  moc{$n}: $s
}

# -I options for the system header directories.
#
sys_incl = $regex.apply($cxx.sys_hdr_dirs, '(.+)', '-I\1')

# Rule to run moc on a header file (foo.h -> moc_foo.cpp).
#
# Use -f to override the path moc uses to #include the input file, which is
# relative to the output directory, with just the name of the input file.
#
# Explicitly list the generated headers as dependencies in case the
# moc-generated file includes any of them (if only indirectly).
#
# Also add the exported search directories for QtCore's public and QtGui's
# private headers (via libul{Qt5GuiIntfMeta Qt5GuiPrivateMeta}) because some
# code will be skipped by MOC unless certain QtCore features are enabled and
# moc will also fail if it can't find certain QtGui headers (for example, ones
# that define plugin interface classes).
#
# Note that hxx{moc_predefs} must always be in position 1.
#
cxx{~'/moc_(.*)/'}: hxx{~'/\1/'} hxx{moc_predefs} hxx{$gen_hdr_pub}     \
                    libul{Qt5GuiIntfMeta Qt5GuiPrivateMeta}             \
                    $moc
{{
  o = $path($>[0])
  t = $(o).t

  dep_incl = $cxx.lib_poptions(libul{Qt5GuiIntfMeta Qt5GuiPrivateMeta})

  depdb hash $dep_incl

  # Note: exclude libul{Qt5GuiIntfMeta Qt5GuiPrivateMeta} from update during
  #       match not to mess up its for-install'ness.
  #
  depdb dyndep                                                  \
    --byproduct --drop-cycles --what=header --default-type=h    \
    --update-exclude libul{Qt5GuiIntfMeta Qt5GuiPrivateMeta}    \
    --file $t

  diag moc ($<[0])

  s = $path($<[0])

  $moc --include $path($<[1]) $cc.poptions $cxx.poptions $dep_incl $sys_incl \
    -f $leaf($s) --output-dep-file --dep-file-path $t -o $o $s
}}

# Rule to run moc on a source file (foo.cpp -> foo.moc).
#
# See the header-input moc rule regarding the header prerequisites.
#
moc{~'/(.*)/'}: cxx{~'/\1/'} hxx{moc_predefs} hxx{$gen_hdr_pub} \
                libul{Qt5GuiIntfMeta Qt5GuiPrivateMeta}         \
                $moc
{{
  o = $path($>[0])
  t = $(o).t

  dep_incl = $cxx.lib_poptions(libul{Qt5GuiIntfMeta Qt5GuiPrivateMeta})

  depdb hash $dep_incl

  depdb dyndep                                                  \
    --byproduct --drop-cycles --what=header --default-type=h    \
    --update-exclude libul{Qt5GuiIntfMeta Qt5GuiPrivateMeta}    \
    --file $t

  diag moc ($<[0])

  s = $path($<[0])

  $moc --include $path($<[1]) $cc.poptions $cxx.poptions $dep_incl $sys_incl \
    --output-dep-file --dep-file-path $t -o $o $s
}}

# Dependencies involving source files generated by rcc from Qt resource files.
#
for s: qrc{$qrc}
{
  n = $name($s)
  lib{Qt5Gui}: cxx{qrc_$(n)}
  cxx{qrc_$(n)}: $s
}

# Rule to run rcc on a Qt resource file (foo.qrc -> qrc_foo.cpp).
#
cxx{~'/qrc_(.*)/'}: qrc{~'/.*\1/'} $rcc
{{
  diag rcc ($<[0])
  $rcc -name $name($<[0]) -o $path($>[0]) $path($<[0])
}}

lib{Qt5Gui}: libul{Qt5GuiIntfMeta Qt5GuiImplMeta Qt5GuiPrivateMeta}

# Generated headers and source files.
#

# Public QtGui library configuration (mostly high-level features).
#
# See the .in file for more information.
#
hxx{qtgui-config}: in{qtgui-config}
{
  # Defined in upstream/qtbase/src/gui/configure.pri.
  #
  QT_QPA_DEFAULT_PLATFORM_NAME = ($windows ? "windows" \
                                           : $QT_QPA_DEFAULT_PLATFORM_NAME)
  QT_QPA_DEFAULT_PLATFORM_NAME = ($macos   ? "cocoa" \
                                           : $QT_QPA_DEFAULT_PLATFORM_NAME)
  QT_QPA_DEFAULT_PLATFORM_NAME = ($linux   ? "xcb" \
                                           : $QT_QPA_DEFAULT_PLATFORM_NAME)
  QT_QPA_DEFAULT_PLATFORM_NAME = ($bsd     ? "xcb" \
                                           : $QT_QPA_DEFAULT_PLATFORM_NAME)
}

# Private QtGui library configuration (lower-level features and settings).
#
# See the .in file for more information.
#
private/QtGui/private/hxx{qtgui-config_p}: private/QtGui/private/in{qtgui-config_p}

# Build options.
#
# Add qpa/ because some upstream source files include qplatform*.h relatively.
#
cc.poptions =+ "-I$out_root"               "-I$src_root"                \
               "-I$out_root/QtGui"         "-I$src_root/QtGui"          \
               "-I$src_base/qpa"

cc.poptions += -DENABLE_PIXMAN_DRAWHELPERS              \
               -DQT_ASCII_CAST_WARNINGS                 \
               -DQT_BUILD_GUI_LIB                       \
               -DQT_DEPRECATED_WARNINGS                 \
               -DQT_DEPRECATED_WARNINGS_SINCE=0x060000  \
               -DQT_MOC_COMPAT                          \
               -DQT_NO_CAST_TO_ASCII                    \
               -DQT_NO_FOREACH                          \
               -DQT_NO_JAVA_STYLE_ITERATORS             \
               -DQT_NO_LINKED_LIST                      \
               -DQT_NO_NARROWING_CONVERSIONS_IN_CONNECT \
               -DQT_NO_USING_NAMESPACE                  \
               -DQT_USE_QSTRINGBUILDER                  \
               -D_REENTRANT                             \
               -DQT_BUILDING_QT

if! $config.libQt5Gui.debug
  cc.poptions += -DQT_NO_DEBUG

# Note: QT_NO_VERSION_TAGGING and QT_SHARED/QT_STATIC are exported by QtCore
#       so need neither be defined again nor exported.

# Add platform-specific header directories, libraries, compilation options,
# and macro definitions.
#
if $windows
{
  cc.poptions += -DUNICODE                      \
                 -DWIN32                        \
                 -D_CRT_SECURE_NO_WARNINGS      \
                 -D_UNICODE                     \
                 -D_USE_MATH_DEFINES            \
                 -DQT_DISABLE_DEPRECATED_BEFORE=0x040800
}
else
{
  cc.poptions += -D_LARGEFILE64_SOURCE  \
                 -D_LARGEFILE_SOURCE    \
                 -DQT_DISABLE_DEPRECATED_BEFORE=0x050000

  if $linux
    lib{Qt5Gui}: cxx.libs += -ldl
}

# Disable exceptions.
#
switch $cxx.class
{
  case 'gcc'
  {
    cxx.poptions += -DQT_NO_EXCEPTIONS
    cxx.coptions += -fno-exceptions
  }
  case 'msvc'
  {
    cxx.poptions += -DQT_NO_EXCEPTIONS
    cxx.coptions += /EHs- /EHc-
  }
}

# Every directory under mkspecs/ contains a unique `qplatformdefs.h`.
#
# @@ TMP `/tmp/installed/include/qt5/QtCore/qplatformdefs.h` is repeated
#    multiple times in the .pc files.
#
# Note that Mac OS with GCC is not supported by upstream (see README-DEV for
# details).
#
switch $cxx.target.class, $cxx.id, $cxx.target.system
{
  case 'linux', 'gcc'
    cc.poptions += "-I$src_root/QtGui/mkspecs/linux-g++"
  case 'linux', 'clang'
    cc.poptions += "-I$src_root/QtGui/mkspecs/linux-clang"
  case 'macos', 'clang-apple'
  {
    cc.poptions += "-I$src_root/QtGui/mkspecs/macx-clang"
    lib{Qt5Gui}: cxx.libs += -framework AppKit  \
                             -framework Foundation
  }
  case 'bsd', 'clang', 'freebsd'
    cc.poptions += "-I$src_root/QtGui/mkspecs/freebsd-clang"
  case 'bsd', 'gcc', 'openbsd'
    cc.poptions += "-I$src_root/QtGui/mkspecs/openbsd-g++"
  case 'bsd', 'gcc', 'netbsd'
    cc.poptions += "-I$src_root/QtGui/mkspecs/netbsd-g++"
  case 'windows', 'msvc'
  {
    cc.poptions += "-I$src_root/QtGui/mkspecs/win32-msvc" \
                    -D_ENABLE_EXTENDED_ALIGNED_STORAGE

    lib{Qt5Gui}: cxx.libs += ole32.lib advapi32.lib shell32.lib
  }
  case 'windows', 'msvc-clang' | 'clang'
  {
    cc.poptions += "-I$src_root/QtGui/mkspecs/win32-clang-msvc" \
                    -D_ENABLE_EXTENDED_ALIGNED_STORAGE

    lib{Qt5Gui}: cxx.libs += ole32.lib advapi32.lib shell32.lib
  }
  case 'windows', 'gcc', 'mingw32'
  {
    cc.poptions += "-I$src_root/QtGui/mkspecs/win32-g++" \
                    -DMINGW_HAS_SECURE_API=1
    cc.coptions += -fno-keep-inline-dllexport

    lib{Qt5Gui}: cxx.libs += -lole32 -ladvapi32 -lshell32
  }
}

# Export options.
#
lib{Qt5Gui}:
{
  cxx.export.poptions = "-I$out_root"  "-I$src_root" \
                        "-I$out_base"  "-I$src_base" \
                        -DQT_GUI_LIB
  cxx.export.libs = $intf_libs
}

lib{Qt5GuiPrivate}:
{
  # Add private/QtGui/ for inclusion of paths such as <qpa/qplatformfoo_p.h>
  # and a few cases such as <private/qicon_p.h> and <private/qfontengine_p.h>
  # (inclusion of private QtGui headers from another module without the
  # `QtGui` prefix).
  #
  cxx.export.poptions =                                                         \
    "-I$out_base/private"               "-I$src_base/private"                   \
    "-I$out_base/private/QtGui"         "-I$src_base/private/QtGui"             \
    "-I$out_base/private/QtGui/private" "-I$src_base/private/QtGui/private"     \
    "-I$src_base/private/QtGui/qpa"

  cxx.export.libs = $priv_intf_libs
}

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{Qt5Gui}: bin.lib.version = "-$version.project_id"
else
  lib{Qt5Gui}: bin.lib.version = "-$version.major.$version.minor"

# Install public headers into the qt5/QtGui/ subdirectory of, say,
# /usr/include/. Note that headers may be included with or without the
# `QtGui/` prefix.
#
{hxx}{* Q*.}: install = include/qt5/QtGui/
{hxx}{qpa/*}: install = include/qt5/QtGui/qpa/

lib{Qt5Gui}: cxx.pkgconfig.include = include/qt5/ include/qt5/QtGui

# Install private headers into the qt5/QtGui/private/ subdirectory of, say,
# /usr/include/, recreating subdirectories. Note that private headers may be
# included prefixed with `QtGui/private/`, `private/`, or without a prefix.
#
{hxx}{private/**}:
{
  install = include/qt5/QtGui/private/
  install.subdirs = true
}

lib{Qt5GuiPrivate}:                                             \
  cxx.pkgconfig.include = include/qt5/QtGui/private             \
                          include/qt5/QtGui/private/QtGui       \
                          include/qt5/QtGui/private/QtGui/private
