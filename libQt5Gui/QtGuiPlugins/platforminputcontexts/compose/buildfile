# Note: If anything in this file seems underdocumented it is probably covered
#       in libQt5Core/QtCore/buildfile.
#

import! [metadata] moc = Qt5Moc%exe{qt5moc}

include ../../../QtGui/

# C++ headers and source files.
#
../lib{composeplatforminputcontextplugin}:      \
  ../../../hxx{mkspecs/**}                      \
  hxx{qcomposeplatforminputcontext}             \
  cxx{qcomposeplatforminputcontext qcomposeplatforminputcontextmain}

# Plugin metadata file.
#
../lib{composeplatforminputcontextplugin}: file{compose.json}

# The "metadata library": its purpose is to make sure all the imported
# libraries are resolved for the moc ad hoc rules below.
#
# Note: use a rule hint to resolve ambiguity between C and C++ library.
#
[rule_hint=cxx] libul{Qt5PluginsLibComposeMeta}: \
  ../../../QtGui/lib{Qt5Gui Qt5GuiPrivate}

# Dependencies involving moc_qcomposeplatforminputcontext.cpp and
# qcomposeplatforminputcontext.h (from which the former is generated).
#
../lib{composeplatforminputcontextplugin}: cxx{moc_qcomposeplatforminputcontext}
cxx{moc_qcomposeplatforminputcontext}:     hxx{qcomposeplatforminputcontext}

# Dependencies involving qcomposeplatforminputcontextmain.moc and
# qcomposeplatforminputcontextmain.cpp (from which the former is generated).
#
../lib{composeplatforminputcontextplugin}: \
  moc{qcomposeplatforminputcontextmain}: include = adhoc
moc{qcomposeplatforminputcontextmain}:  \
  cxx{qcomposeplatforminputcontextmain}

# Rule to run moc on a header file (foo.h -> moc_foo.cpp).
#
# Use -f to override the path moc uses to #include the input file, which is
# relative to the output directory, with just the name of the input file.
#
# Note that we depend on libul{Qt5PluginsLibComposeMeta} in order to ensure
# all the imported libraries are resolved for these ad hoc rules.
#
# Also add QtGui's exported header search directories (via
# libul{Qt5PluginsLibComposeMeta}) otherwise certain definitions required by
# moc will be missing.
#
cxx{~'/moc_(.*)/'}: hxx{~'/\1/'} libul{Qt5PluginsLibComposeMeta} $moc
{{
  o = $path($>[0])
  t = $(o).t

  dep_incl = $cxx.lib_poptions(libul{Qt5PluginsLibComposeMeta})

  depdb hash $dep_incl

  # Note: exclude libul{Qt5PluginsLibComposeMeta} from update during match not
  #       to mess up its for-install'ness.
  #
  depdb dyndep                                                  \
    --byproduct --drop-cycles --what=header --default-type=h    \
    --update-exclude libul{Qt5PluginsLibComposeMeta}            \
    --file $t

  diag moc ($<[0])

  s = $path($<[0])

  sys_incl = $regex.apply($cxx.sys_hdr_dirs, '(.+)', '-I\1')

  $moc --include $moc_predefs_path                      \
    $cc.poptions $cxx.poptions $dep_incl $sys_incl      \
    -f $leaf($s) --output-dep-file --dep-file-path $t -o $o $s
}}

# Rule to run moc on a source file (foo.cpp -> foo.moc).
#
# See the header-input moc rule regarding the header prerequisites.
#
moc{~'/(.*)/'}: cxx{~'/\1/'} libul{Qt5PluginsLibComposeMeta} $moc
{{
  o = $path($>[0])
  t = $(o).t

  dep_incl = $cxx.lib_poptions(libul{Qt5PluginsLibComposeMeta})

  depdb hash $dep_incl

  depdb dyndep                                                  \
    --byproduct --drop-cycles --what=header --default-type=h    \
    --update-exclude libul{Qt5PluginsLibComposeMeta}            \
    --file $t

  diag moc ($<[0])

  s = $path($<[0])

  sys_incl = $regex.apply($cxx.sys_hdr_dirs, '(.+)', '-I\1')

  $moc --include $moc_predefs_path                      \
    $cc.poptions $cxx.poptions $dep_incl $sys_incl      \
    --output-dep-file --dep-file-path $t -o $o $s
}}

../lib{composeplatforminputcontextplugin}: libul{Qt5PluginsLibComposeMeta}

# Build options.
#
cxx.poptions =+ "-I$out_base" "-I$src_base"
cxx.poptions += -DQT_PLUGIN

if ($cxx.class == 'gcc')
  cxx.coptions += -fvisibility=hidden -fvisibility-inlines-hidden

../lib{composeplatforminputcontextplugin}: \
  cxx.libs += -pthread -lxkbcommon

# Installation.
#
hxx{*}: install = false

../lib{composeplatforminputcontextplugin}: \
  install = lib/qt5/plugins/platforminputcontexts/
