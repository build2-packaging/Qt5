import impl_libs = libfreetype%lib{freetype}

import! [metadata] moc = Qt5Moc%exe{qt5moc}

include ../../../../QtGui/

windows_src = windows/qwindowsfontdatabase      \
              windows/qwindowsfontdatabase_ft   \
              windows/qwindowsfontengine        \
              windows/qwindowsnativeimage

macos_src = mac/qfontengine_coretext \
            mac/qcoretextfontdatabase

[rule_hint=cxx] libul{Qt5FontDatabaseSupport}:

libul{Qt5FontDatabaseSupport}: freetype/{hxx cxx}{*}

libul{Qt5FontDatabaseSupport}: fontconfig/{hxx cxx}{*}: \
  include = ($linux || $bsd)

libul{Qt5FontDatabaseSupport}: windows/hxx{*} cxx{$windows_src}: \
  include = $windows

libul{Qt5FontDatabaseSupport}: mac/hxx{*} mm{$macos_src}: \
  include = $macos

# Declare the dependency of the library target on the Objective-C++ source
# files via the corresponding object files.
#
for n: $macos_src
{
  obja{$(n).a.o}:  mm{$n}
  objs{$(n).so.o}: mm{$n}
}

libua{Qt5FontDatabaseSupport}: obja{$regex.apply($macos_src,'(.+)','\1.a.o')}: \
  include = $macos
libus{Qt5FontDatabaseSupport}: objs{$regex.apply($macos_src,'(.+)','\1.so.o')}: \
  include = $macos

# The "metadata library": its purpose is to make sure all the imported
# libraries are resolved for the ad hoc .mm and moc rules below.
#
# Note: use a rule hint to resolve ambiguity between C and C++ library.
#
[rule_hint=cxx] libul{Qt5FontDatabaseSupportMeta}:              \
                  ../../../../QtGui/lib{Qt5Gui Qt5GuiPrivate}   \
                  $impl_libs

# Rules for compiling Objective-C++ source files into object files.
#
# Note: these rules are only used on Mac OS (so no -fPIC, etc).  Note: exclude
# libua{Qt5FontDatabaseSupportMeta} from update during match not to mess up
# its for-install'ness.
#
obja{~'/(.*).a/'}: mm{~'/\1/'} libua{Qt5FontDatabaseSupportMeta}
{{
  dep_poptions = $cxx.lib_poptions(libua{Qt5FontDatabaseSupportMeta}, obja)

  depdb hash $dep_poptions

  depdb dyndep --what=header --default-type=h                           \
               --update-exclude libua{Qt5FontDatabaseSupportMeta}       \
               -- $cxx.path $cc.poptions $cxx.poptions $dep_poptions    \
                  $cc.coptions $cxx.coptions $cxx.mode -M -MG $path($<[0])

  diag obj-c++ ($<[0])

  $cxx.path $cc.poptions $cxx.poptions $dep_poptions    \
            $cc.coptions $cxx.coptions $cxx.mode        \
            -o $path($>) -c -x objective-c++ $path($<[0])
}}

objs{~'/(.*).so/'}: mm{~'/\1/'} libus{Qt5FontDatabaseSupportMeta}
{{
  dep_poptions = $cxx.lib_poptions(libus{Qt5FontDatabaseSupportMeta}, objs)

  depdb hash $dep_poptions

  depdb dyndep --what=header --default-type=h                           \
               --update-exclude libus{Qt5FontDatabaseSupportMeta}       \
               -- $cxx.path $cc.poptions $cxx.poptions $dep_poptions    \
                  $cc.coptions $cxx.coptions $cxx.mode -M -MG $path($<[0])

  diag obj-c++ ($<[0])

  $cxx.path $cc.poptions $cxx.poptions $dep_poptions    \
            $cc.coptions $cxx.coptions $cxx.mode        \
            -o $path($>) -c -x objective-c++ $path($<[0])
}}

# Rule to generate a header with C++ compiler's predefined macros. It is used
# to make them available to moc.
#
hxx{moc_predefs}: ../../../../mkspecs/features/data/cxx{dummy}
%
if ($cxx.id != 'msvc')
{{
  diag gen ($>[0])
  $cxx.path $cc.poptions $cxx.poptions $cc.coptions $cxx.coptions $cxx.mode \
            -o $path($>) -dM -E $path($<)
}}
else
{{
  diag gen ($>[0])
  cat <<EOI >$path($>)
  #define _WIN32
  #define WIN32
  EOI
}}

mac/cxx{moc_qfontengine_coretext_p}: mac/hxx{qfontengine_coretext_p}
libul{Qt5FontDatabaseSupport}: mac/cxx{moc_qfontengine_coretext_p}: include = $macos

# -I options for the system header directories.
#
sys_incl = $regex.apply($cxx.sys_hdr_dirs, '(.+)', '-I\1')

# Rule to run moc on a header file (foo.h -> moc_foo.cpp).
#
# Use -f to override the path moc uses to #include the input file, which is
# relative to the output directory, with just the name of the input file.
#
# Explicitly list the generated headers as dependencies in case the
# moc-generated file includes any of them (if only indirectly).
#
# Also add the exported search directories for QtCore's public headers (via
# libul{Qt5FontDatabaseSupportMeta}) because some code will be skipped by MOC
# unless certain QtCore features are enabled.
#
# Note that hxx{moc_predefs} must always be in position 1.
#
cxx{~'/moc_(.*)/'}: hxx{~'/\1/'} hxx{moc_predefs} \
                    libul{Qt5FontDatabaseSupportMeta} $moc
{{
  o = $path($>[0])
  t = $(o).t

  dep_incl = $cxx.lib_poptions(libul{Qt5FontDatabaseSupportMeta})

  depdb hash $dep_incl

  # Note: exclude libul{Qt5FontDatabaseSupportMeta} from update during match
  #       not to mess up its for-install'ness.
  #
  depdb dyndep                                                  \
    --byproduct --drop-cycles --what=header --default-type=h    \
    --update-exclude libul{Qt5FontDatabaseSupportMeta}          \
    --file $t

  diag moc ($<[0])

  s = $path($<[0])

  $moc --include $path($<[1]) $cc.poptions $cxx.poptions $dep_incl $sys_incl \
    -f $leaf($s) --output-dep-file --dep-file-path $t -o $o $s
}}

libul{Qt5FontDatabaseSupport}: libul{Qt5FontDatabaseSupportMeta}

cxx.poptions =+ "-I$out_base/mac" "-I$src_base/mac"

cxx.poptions += $platforms_poptions			\
                -DQT_BUILD_FONTDATABASE_SUPPORT_LIB	\
                -DQT_NO_CAST_FROM_ASCII
