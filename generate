#!/usr/bin/env bash

# file      : generate
# license   : MIT

# Create the infrastructure required by our Qt packages:
#
# - Create a source layout more suitable to our purposes which is still
#   compatible the Qt upstream (the way they include stuff, etc).
#

owd="$(pwd)"
trap "{ cd '$owd'; exit 1; }" ERR
set -o errtrace     # Trap in functions and subshells.
set -o pipefail     # Fail if any pipeline command fails.
shopt -s lastpipe   # Execute last pipeline command in the current shell.
shopt -s nullglob   # Expand no-match globs to nothing rather than themselves.

function info () { echo "$*" 1>&2; }
function error () { info "$*"; exit 1; }

# Remove previously-generated files and directories.
#
rm -f Qt5Moc/moc/*.{h,cpp,orig}
rm -rf Qt5Moc/moc/QtCore/
rm -f Qt5Moc/moc/mkspecs
rm -rf Qt5Moc/moc/3rdparty
rm -rf libQt5Core/QtCore/{*.h,Q*,*.orig}
rm -f libQt5Core/QtCore/mkspecs

# Create output directories.
#
mkdir -p Qt5Moc/moc/QtCore/private
mkdir -p libQt5Core/QtCore/private

# This directory has to be a sibling to QtCore/ because the QtCore source
# files use include paths such as "../../3rdparty/freebsd/strtoll.c".
#
mkdir Qt5Moc/moc/3rdparty

# Symlink the upstream platform-specific include directories.
#
ln -s ../../upstream/qtbase/mkspecs Qt5Moc/moc/
ln -s ../../upstream/qtbase/mkspecs libQt5Core/QtCore/

# Symlink the upstream third-party directories required to build moc.
#
ln -s ../../../upstream/qtbase/src/3rdparty/{freebsd,sha1} \
      Qt5Moc/moc/3rdparty/

# Symlink all QtCore sources into <output-path-prefix>/QtCore/.
#
# Note that we have to rearrange the upstream sources because they cannot be
# built the way they're laid out in upstream/qtbase/src/corelib/ (the upstream
# build also rearranges them).
#
# From the upstream directory layout,
#
#   upstream/qtbase/src/corelib
#   ├── foo
#   │   ├── foo.cpp
#   │   ├── foo.h
#   │   ├── foo_p.h
#   │   ...
#   ├── bar
#   │   ├── bar.cpp
#   │   ├── bar.h
#   │   ├── bar_p.h
#   │   ...
#   ...
#
# create the following layout:
#
#   <output-path-prefix>
#    └── QtCore
#        ├── foo
#        │   ├── foo.cpp
#        │   ...
#        ├── bar
#        │   ├── bar.cpp
#        │   ...
#        ├── private
#        │   ├── foo_p.h
#        │   ├── bar_p.h
#        │   ...
#        ├── foo.h
#        ├── bar.h
#        ...
#
function symlink_qtcore_subdir () # <output-path-prefix> <qtcore-dir>
{
  local opp="$1" # Output path prefix.
  local d="$2"   # QtCore subdirectory from upstream.

  # Project directory path: the relative path to get to the project directory
  # from the output path prefix (`opp`). For example, from Qt5Moc/moc/ it
  # would be `../..`.
  #
  local pdp="$(sed -E 's%[^/]+%..%g' <<<"$opp")"
  local sdd="$opp/QtCore/$(basename $d)" # Source file destination directory.
  mkdir -p "$sdd"

  # All of the source files of interest are directly under one of
  # src/corelib/'s subdirectories (that is, nested no deeper).
  #
  local f
  for f in "$d"/*; do
    f="${f#upstream/}" # Strip "upstream/" prefix.

    tpp= # Symlink target path prefix.
    spp= # Symlink path prefix.
    case "$f" in
      # Private header.
      #
      *_p.h)
        tpp="$pdp/../.."
        spp="$opp/QtCore/private"
        ;;
      # Public header.
      #
      *.h)
        tpp="$pdp/.."
        spp="$opp/QtCore"
        ;;
      # C++ source file.
      # Objective-C++ source file.
      #
      *.cpp | *.mm)
        tpp="$pdp/../.."
        spp="$sdd"
        ;;
      # Not a source file.
      #
      *) continue ;;
    esac

    # If there is a downstream version of this file, its symlink gets the
    # upstream filename while the upstream original's symlink gets the
    # upstream filename with a ".orig" extension.
    #
    local fn="$(basename "$f")" # File name.
    if [[ -f "downstream/$f" ]]; then
      ln -sf "$tpp/upstream/$f"   "$spp/$fn.orig"
      ln -sf "$tpp/downstream/$f" "$spp/$fn"
    else
      ln -sf "$tpp/upstream/$f"   "$spp/$fn"
    fi
  done

  # Remove the source file destination directory if it is empty (which would
  # be the case if the upstream directory contained no source files).
  #
  if [[ -z "$(ls "$sdd")" ]]; then
    rmdir "$sdd"
  fi
}

# Symlink the upstream QtCore sources into Qt5Moc/ and libQt5Core/. Although
# the Qt5Moc build includes only a subset of the QtCore sources we symlink all
# of them for the sake of simplicity (its buildfile does not use wildcards).
#
for d in upstream/qtbase/src/corelib/*/; do
  d="${d%/}" # Strip trailing /.
  symlink_qtcore_subdir "Qt5Moc/moc" "$d"
  symlink_qtcore_subdir "libQt5Core" "$d"
done

# Symlink all of the moc application's headers and source files into
# Qt5Moc/moc/.
#
for f in upstream/qtbase/src/tools/moc/*.{h,cpp}; do
  f="${f#upstream/}"    # Strip "upstream/" prefix.
  fn="$(basename "$f")" # File name.

  # See the symlinking of the QtCore sources above.
  #
  if [[ -f "downstream/$f" ]]; then
    ln -s "../../upstream/$f"   "Qt5Moc/moc/$fn.orig"
    ln -s "../../downstream/$f" "Qt5Moc/moc/$fn"
  else
    ln -s "../../upstream/$f"   "Qt5Moc/moc/$fn"
  fi
done

# Copy headers generated by the upstream build into libQt5Core/QtCore/. (None
# of these are required for the Qt5Moc build.)
#
# The majority of the generated headers are camelcase versions of the public
# headers (foobar.h -> QFooBar) but a few additional headers (public only) are
# also generated.
#
# Run the upstream syncqt.pl script to produce the include tree and copy only
# those headers that don't also exist in the upstream directory (in which case
# they are not generated and will already have been symlinked above).
#

# Extract the Qt version from upstream/qtbase/.qmake.conf.
#
qt_version="$(sed -nE 's%MODULE_VERSION = (.+)%\1%p' \
                  upstream/qtbase/.qmake.conf)"

tmpdir="$(mktemp -d)"

if ! upstream/qtbase/bin/syncqt.pl \
     -copy -module QtCore -version "$qt_version" \
     -outdir "$tmpdir" upstream/qtbase \
     > /dev/null; then
  rm -r "$tmpdir"
  error "syncqt.pl failed"
fi

# Copy those public *.h headers that have not already been symlinked and all
# camelcase headers (of which all are generated and thus none symlinked).
#
for p in "$tmpdir/include/QtCore/"*; do
  f="$(basename "$p")"
  if [[ ("$f" == *.h && ! -e "libQt5Core/QtCore/$f") || "$f" == Q* ]]; then
    cp "$p" libQt5Core/QtCore/
  fi
done

rm -r "$tmpdir"
