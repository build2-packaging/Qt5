1. Licensing

1.1. Qt Core

License choices:

  a) Qt Commercial License

  b) GPL v2-only or GPL v3-only

  c) LGPL v3-only

1.2. Meta-Object Compiler (MOC)

License choices:

  a) Qt Commercial License

  b) GPL v3-only with exceptions granted by Qt
     (upstream/qtbase/LICENSE.GPL3-EXCEPT). These exceptions relax the
     GPLv3. For example, it allows a work that contains, but does not output
     itself, MOC output (such as a program compiled with MOC-generated source
     files) to be distributed under any terms.

2. Qt mailing lists

They're listed on qt-project.org which is a fact not easy to discover starting
from https://qt.io/ but see https://wiki.qt.io/Online_Communities.

3. Build system notes

Configure/build system: https://wiki.qt.io/Qt5_Build_System

QMake manual: https://doc.qt.io/qt-5.5/qmake-manual.html

3.1 Running the upstream build

- Configure

  $ Qt5/upstream/qtbase/configure -v \
    -opensource -nomake examples -nomake tests -no-widgets -no-dbus

- Build

  $ make

3.2 Platform-specific code

In qmake, platform-specific code is wrapped in a "platform scope" which looks
like this:

  win32 {...}
  linux-g++ {...}
  freebsd-clang {...}

The full set of "toplevel" platform names like `win32`, `linux`, or `mingw`
can be found out by grepping for all occurrences of "QMAKE_PLATFORM" in *.conf
under upstream/qtbase/mkspecs/, while the more specific platform names like
`linux-g++`, `freebsd-clang`, or `win32-clang-msvc` each have a directory
under upstream/qtbase/mkspecs/.

3.3 Qt module configuration

In general, the qt<module>-config.h header defines the macros for public/user
features, while the qt<module>-config_p.h header defines macros for
private/internal features. Users can only enable or disable public features,
not the private ones.

In the Qt source code the features (QT_FEATURE_foo macros) are checked using
the QT_CONFIG(foo) macro (defined in qglobal.h) which will not compile unless
the macro is defined and has a value of 1 or -1.

If QT_FEATURE_foo is defined to -1 then it may also be necessary to define
QT_NO_FOO (always in the public header).

NOTE: to find usage instances, grep in upstream/qtbase/ for
      '(qtConfig|QT_CONFIG)\(<feature-name>\)'

The files qtbase/configure.json and qtbase/src/corelib/configure.json are the
sources used by qtbase/mkspecs/features/qt_configure.prf to generate
qtconfig{,_p}.h and qtcore-config{,_p}.h, respectively. Entries in the
`features` array in configure.json files correspond to .prf files under
upstream/qtbase/mkspecs/features/. See https://wiki.qt.io/Qt5_Build_System.

4. Platform/compiler support issues

Mac OS with GCC is not supported because certain system headers make use of
Objective-C blocks
(https://en.wikipedia.org/wiki/Blocks_(C_language_extension)) which are not
supported by GNU gcc/g++. There is an open issue to add support
(https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78352) but it's stalled for what
looks like licensing reasons (see comment 16).

5. Qt build

5.1 Shared vs. static

The upstream build defaults to shared; static libraries are not built by
default.

5.2 Symbol export

The general convention seems to be that the definition of
QT_BUILD_<library>_LIB causes <library>/qt<library>global.h to define
Q_<LIBRARY>_EXPORT to Q_DECL_EXPORT, or to Q_DECL_IMPORT if
QT_BUILD_<library>_LIB is not defined. (The upstream build automatically
defines QT_<library>_LIB in the import/consumption case but it seems to only
be used in their tests.)

Under MSVC, Q_DECL_EXPORT is defined (in corelib/global/qcompilerdetection.h)
to __declspec(dllexport) and Q_DECL_IMPORT to __declspec(dllimport). Under GCC
and Clang both are defined to __attribute__((visibility("default"))) (that is,
export the symbol).

Note that as a result of the above QT_BUILD_<library>_LIB only actually
affects symbol export under MSVC. Under GCC and Clang all symbols are exported
by default and therefore additional mechanisms such as the -fvisibility=hidden
and -fvisibility-inlines-hidden command-line options and/or linker version
scripts are used in order to restrict symbol exports.
